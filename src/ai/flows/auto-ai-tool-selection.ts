
// AutoAIToolSelection flow
'use server';
/**
 * @fileOverview Automatically selects the best AI tool based on the complexity and context of the query.
 *
 * - autoAIToolSelection - A function that automatically selects an AI tool and returns its response.
 * - AutoAIToolSelectionInput - The input type for the autoAIToolSelection function.
 * - AutoAIToolSelectionOutput - The return type for the autoAIToolSelection function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AutoAIToolSelectionInputSchema = z.object({
  query: z.string().describe('The user query to be processed by the AI tool.'),
  userId: z.string().describe('The ID of the user making the query.'),
});
export type AutoAIToolSelectionInput = z.infer<typeof AutoAIToolSelectionInputSchema>;

// The output now just returns the selected tool, as the response is mocked.
const AutoAIToolSelectionOutputSchema = z.object({
  tool: z.string().describe('The AI tool that was automatically selected.'),
  response: z.string().describe('The response generated by the selected AI tool.'),
  rawResponse: z.string().optional().describe('The raw response from the AI provider, for debugging.'),
});
export type AutoAIToolSelectionOutput = z.infer<typeof AutoAIToolSelectionOutputSchema>;

export async function autoAIToolSelection(input: AutoAIToolSelectionInput): Promise<AutoAIToolSelectionOutput> {
  return autoAIToolSelectionFlow(input);
}

const selectAITool = ai.defineTool({
  name: 'selectAITool',
  description: 'Selects the most appropriate AI tool based on the complexity and context of the user query.',
  inputSchema: z.object({
    query: z.string().describe('The user query to be processed.'),
  }),
  outputSchema: z.enum(['GPT', 'Gemini', 'Purplexcity', 'Grok', 'Deepseek', 'FreeTool']),
}, async (input) => {
  // Simple logic to select a tool. Defaults to Gemini for longer queries.
  if(input.query.length < 50) {
      return 'FreeTool'
  }
  return 'Gemini';
});


const autoAIToolSelectionFlow = ai.defineFlow({
  name: 'autoAIToolSelectionFlow',
  inputSchema: AutoAIToolSelectionInputSchema,
  outputSchema: AutoAIToolSelectionOutputSchema,
}, async (input) => {
  const selectedTool = await selectAITool({ query: input.query });

  const llmResponse = await ai.generate({
    prompt: input.query,
  });

  const response = llmResponse.text;

  return {
    tool: selectedTool,
    response: response,
    rawResponse: JSON.stringify(llmResponse.output, null, 2),
  };
});
